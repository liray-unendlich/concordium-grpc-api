// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: concordium_p2p_rpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerElement_CatchupStatus int32

const (
	PeerElement_UPTODATE   PeerElement_CatchupStatus = 0
	PeerElement_PENDING    PeerElement_CatchupStatus = 1
	PeerElement_CATCHINGUP PeerElement_CatchupStatus = 2
)

// Enum value maps for PeerElement_CatchupStatus.
var (
	PeerElement_CatchupStatus_name = map[int32]string{
		0: "UPTODATE",
		1: "PENDING",
		2: "CATCHINGUP",
	}
	PeerElement_CatchupStatus_value = map[string]int32{
		"UPTODATE":   0,
		"PENDING":    1,
		"CATCHINGUP": 2,
	}
)

func (x PeerElement_CatchupStatus) Enum() *PeerElement_CatchupStatus {
	p := new(PeerElement_CatchupStatus)
	*p = x
	return p
}

func (x PeerElement_CatchupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerElement_CatchupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_rpc_proto_enumTypes[0].Descriptor()
}

func (PeerElement_CatchupStatus) Type() protoreflect.EnumType {
	return &file_p2p_rpc_proto_enumTypes[0]
}

func (x PeerElement_CatchupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerElement_CatchupStatus.Descriptor instead.
func (PeerElement_CatchupStatus) EnumDescriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{7, 0}
}

type NodeInfoResponse_IsInBakingCommittee int32

const (
	NodeInfoResponse_NOT_IN_COMMITTEE                  NodeInfoResponse_IsInBakingCommittee = 0
	NodeInfoResponse_ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE NodeInfoResponse_IsInBakingCommittee = 1
	NodeInfoResponse_ADDED_BUT_WRONG_KEYS              NodeInfoResponse_IsInBakingCommittee = 2
	NodeInfoResponse_ACTIVE_IN_COMMITTEE               NodeInfoResponse_IsInBakingCommittee = 3
)

// Enum value maps for NodeInfoResponse_IsInBakingCommittee.
var (
	NodeInfoResponse_IsInBakingCommittee_name = map[int32]string{
		0: "NOT_IN_COMMITTEE",
		1: "ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE",
		2: "ADDED_BUT_WRONG_KEYS",
		3: "ACTIVE_IN_COMMITTEE",
	}
	NodeInfoResponse_IsInBakingCommittee_value = map[string]int32{
		"NOT_IN_COMMITTEE":                  0,
		"ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE": 1,
		"ADDED_BUT_WRONG_KEYS":              2,
		"ACTIVE_IN_COMMITTEE":               3,
	}
)

func (x NodeInfoResponse_IsInBakingCommittee) Enum() *NodeInfoResponse_IsInBakingCommittee {
	p := new(NodeInfoResponse_IsInBakingCommittee)
	*p = x
	return p
}

func (x NodeInfoResponse_IsInBakingCommittee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInfoResponse_IsInBakingCommittee) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_rpc_proto_enumTypes[1].Descriptor()
}

func (NodeInfoResponse_IsInBakingCommittee) Type() protoreflect.EnumType {
	return &file_p2p_rpc_proto_enumTypes[1]
}

func (x NodeInfoResponse_IsInBakingCommittee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInfoResponse_IsInBakingCommittee.Descriptor instead.
func (NodeInfoResponse_IsInBakingCommittee) EnumDescriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{11, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{0}
}

type NumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumberResponse) Reset() {
	*x = NumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberResponse) ProtoMessage() {}

func (x *NumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberResponse.ProtoReflect.Descriptor instead.
func (*NumberResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *NumberResponse) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolResponse) Reset() {
	*x = BoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResponse) ProtoMessage() {}

func (x *BoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResponse.ProtoReflect.Descriptor instead.
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *BoolResponse) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type StringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringResponse) Reset() {
	*x = StringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringResponse) ProtoMessage() {}

func (x *StringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringResponse.ProtoReflect.Descriptor instead.
func (*StringResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *StringResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type JsonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JsonResponse) Reset() {
	*x = JsonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonResponse) ProtoMessage() {}

func (x *JsonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonResponse.ProtoReflect.Descriptor instead.
func (*JsonResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *JsonResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BytesResponse) Reset() {
	*x = BytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesResponse) ProtoMessage() {}

func (x *BytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesResponse.ProtoReflect.Descriptor instead.
func (*BytesResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *BytesResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PeerConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PeerConnectRequest) Reset() {
	*x = PeerConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnectRequest) ProtoMessage() {}

func (x *PeerConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnectRequest.ProtoReflect.Descriptor instead.
func (*PeerConnectRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *PeerConnectRequest) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *PeerConnectRequest) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type PeerElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Port          *wrapperspb.UInt32Value   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Ip            *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	CatchupStatus PeerElement_CatchupStatus `protobuf:"varint,4,opt,name=catchup_status,json=catchupStatus,proto3,enum=concordium.PeerElement_CatchupStatus" json:"catchup_status,omitempty"`
}

func (x *PeerElement) Reset() {
	*x = PeerElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerElement) ProtoMessage() {}

func (x *PeerElement) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerElement.ProtoReflect.Descriptor instead.
func (*PeerElement) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *PeerElement) GetNodeId() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *PeerElement) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *PeerElement) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *PeerElement) GetCatchupStatus() PeerElement_CatchupStatus {
	if x != nil {
		return x.CatchupStatus
	}
	return PeerElement_UPTODATE
}

type PeerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerType string         `protobuf:"bytes,1,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	Peers    []*PeerElement `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeerListResponse) Reset() {
	*x = PeerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerListResponse) ProtoMessage() {}

func (x *PeerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerListResponse.ProtoReflect.Descriptor instead.
func (*PeerListResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *PeerListResponse) GetPeerType() string {
	if x != nil {
		return x.PeerType
	}
	return ""
}

func (x *PeerListResponse) GetPeers() []*PeerElement {
	if x != nil {
		return x.Peers
	}
	return nil
}

type PeerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peerstats []*PeerStatsResponse_PeerStats `protobuf:"bytes,1,rep,name=peerstats,proto3" json:"peerstats,omitempty"`
	AvgBpsIn  uint64                         `protobuf:"varint,2,opt,name=avg_bps_in,json=avgBpsIn,proto3" json:"avg_bps_in,omitempty"`
	AvgBpsOut uint64                         `protobuf:"varint,3,opt,name=avg_bps_out,json=avgBpsOut,proto3" json:"avg_bps_out,omitempty"`
}

func (x *PeerStatsResponse) Reset() {
	*x = PeerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStatsResponse) ProtoMessage() {}

func (x *PeerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStatsResponse.ProtoReflect.Descriptor instead.
func (*PeerStatsResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *PeerStatsResponse) GetPeerstats() []*PeerStatsResponse_PeerStats {
	if x != nil {
		return x.Peerstats
	}
	return nil
}

func (x *PeerStatsResponse) GetAvgBpsIn() uint64 {
	if x != nil {
		return x.AvgBpsIn
	}
	return 0
}

func (x *PeerStatsResponse) GetAvgBpsOut() uint64 {
	if x != nil {
		return x.AvgBpsOut
	}
	return 0
}

type NetworkChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *NetworkChangeRequest) Reset() {
	*x = NetworkChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkChangeRequest) ProtoMessage() {}

func (x *NetworkChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkChangeRequest.ProtoReflect.Descriptor instead.
func (*NetworkChangeRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkChangeRequest) GetNetworkId() *wrapperspb.Int32Value {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                      *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CurrentLocaltime            uint64                               `protobuf:"varint,2,opt,name=current_localtime,json=currentLocaltime,proto3" json:"current_localtime,omitempty"`
	PeerType                    string                               `protobuf:"bytes,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	ConsensusBakerRunning       bool                                 `protobuf:"varint,4,opt,name=consensus_baker_running,json=consensusBakerRunning,proto3" json:"consensus_baker_running,omitempty"`
	ConsensusRunning            bool                                 `protobuf:"varint,5,opt,name=consensus_running,json=consensusRunning,proto3" json:"consensus_running,omitempty"`
	ConsensusType               string                               `protobuf:"bytes,6,opt,name=consensus_type,json=consensusType,proto3" json:"consensus_type,omitempty"`
	ConsensusBakerCommittee     NodeInfoResponse_IsInBakingCommittee `protobuf:"varint,7,opt,name=consensus_baker_committee,json=consensusBakerCommittee,proto3,enum=concordium.NodeInfoResponse_IsInBakingCommittee" json:"consensus_baker_committee,omitempty"`
	ConsensusFinalizerCommittee bool                                 `protobuf:"varint,8,opt,name=consensus_finalizer_committee,json=consensusFinalizerCommittee,proto3" json:"consensus_finalizer_committee,omitempty"`
	ConsensusBakerId            *wrapperspb.UInt64Value              `protobuf:"bytes,9,opt,name=consensus_baker_id,json=consensusBakerId,proto3" json:"consensus_baker_id,omitempty"`
	// Deprecated: Do not use.
	StagingNetUsername *wrapperspb.StringValue `protobuf:"bytes,50,opt,name=staging_net_username,json=stagingNetUsername,proto3" json:"staging_net_username,omitempty"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *NodeInfoResponse) GetNodeId() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeInfoResponse) GetCurrentLocaltime() uint64 {
	if x != nil {
		return x.CurrentLocaltime
	}
	return 0
}

func (x *NodeInfoResponse) GetPeerType() string {
	if x != nil {
		return x.PeerType
	}
	return ""
}

func (x *NodeInfoResponse) GetConsensusBakerRunning() bool {
	if x != nil {
		return x.ConsensusBakerRunning
	}
	return false
}

func (x *NodeInfoResponse) GetConsensusRunning() bool {
	if x != nil {
		return x.ConsensusRunning
	}
	return false
}

func (x *NodeInfoResponse) GetConsensusType() string {
	if x != nil {
		return x.ConsensusType
	}
	return ""
}

func (x *NodeInfoResponse) GetConsensusBakerCommittee() NodeInfoResponse_IsInBakingCommittee {
	if x != nil {
		return x.ConsensusBakerCommittee
	}
	return NodeInfoResponse_NOT_IN_COMMITTEE
}

func (x *NodeInfoResponse) GetConsensusFinalizerCommittee() bool {
	if x != nil {
		return x.ConsensusFinalizerCommittee
	}
	return false
}

func (x *NodeInfoResponse) GetConsensusBakerId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ConsensusBakerId
	}
	return nil
}

// Deprecated: Do not use.
func (x *NodeInfoResponse) GetStagingNetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.StagingNetUsername
	}
	return nil
}

type BlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *BlockHash) Reset() {
	*x = BlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHash) ProtoMessage() {}

func (x *BlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHash.ProtoReflect.Descriptor instead.
func (*BlockHash) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *BlockHash) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type AccountAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *AccountAddress) Reset() {
	*x = AccountAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAddress) ProtoMessage() {}

func (x *AccountAddress) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAddress.ProtoReflect.Descriptor instead.
func (*AccountAddress) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *AccountAddress) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

type TransactionHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *TransactionHash) Reset() {
	*x = TransactionHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHash) ProtoMessage() {}

func (x *TransactionHash) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHash.ProtoReflect.Descriptor instead.
func (*TransactionHash) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *TransactionHash) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type BlockHashAndAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Amount    uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BlockHashAndAmount) Reset() {
	*x = BlockHashAndAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHashAndAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHashAndAmount) ProtoMessage() {}

func (x *BlockHashAndAmount) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHashAndAmount.ProtoReflect.Descriptor instead.
func (*BlockHashAndAmount) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *BlockHashAndAmount) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockHashAndAmount) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *SendTransactionRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *SendTransactionRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GetAddressInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetAddressInfoRequest) Reset() {
	*x = GetAddressInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressInfoRequest) ProtoMessage() {}

func (x *GetAddressInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAddressInfoRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetAddressInfoRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetAddressInfoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetModuleSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	ModuleRef string `protobuf:"bytes,2,opt,name=module_ref,json=moduleRef,proto3" json:"module_ref,omitempty"`
}

func (x *GetModuleSourceRequest) Reset() {
	*x = GetModuleSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleSourceRequest) ProtoMessage() {}

func (x *GetModuleSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleSourceRequest.ProtoReflect.Descriptor instead.
func (*GetModuleSourceRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetModuleSourceRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetModuleSourceRequest) GetModuleRef() string {
	if x != nil {
		return x.ModuleRef
	}
	return ""
}

type DumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Raw  bool   `protobuf:"varint,2,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *DumpRequest) Reset() {
	*x = DumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRequest) ProtoMessage() {}

func (x *DumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRequest.ProtoReflect.Descriptor instead.
func (*DumpRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *DumpRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *DumpRequest) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

type PeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeBootstrappers bool `protobuf:"varint,1,opt,name=include_bootstrappers,json=includeBootstrappers,proto3" json:"include_bootstrappers,omitempty"`
}

func (x *PeersRequest) Reset() {
	*x = PeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersRequest) ProtoMessage() {}

func (x *PeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersRequest.ProtoReflect.Descriptor instead.
func (*PeersRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *PeersRequest) GetIncludeBootstrappers() bool {
	if x != nil {
		return x.IncludeBootstrappers
	}
	return false
}

type GetTransactionStatusInBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHash       string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *GetTransactionStatusInBlockRequest) Reset() {
	*x = GetTransactionStatusInBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionStatusInBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusInBlockRequest) ProtoMessage() {}

func (x *GetTransactionStatusInBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusInBlockRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusInBlockRequest) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetTransactionStatusInBlockRequest) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *GetTransactionStatusInBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type BlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *BlockHeight) Reset() {
	*x = BlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeight) ProtoMessage() {}

func (x *BlockHeight) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeight.ProtoReflect.Descriptor instead.
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *BlockHeight) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type PeerStatsResponse_PeerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	PacketsSent     uint64 `protobuf:"varint,2,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsReceived uint64 `protobuf:"varint,3,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	Latency         uint64 `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *PeerStatsResponse_PeerStats) Reset() {
	*x = PeerStatsResponse_PeerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStatsResponse_PeerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStatsResponse_PeerStats) ProtoMessage() {}

func (x *PeerStatsResponse_PeerStats) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStatsResponse_PeerStats.ProtoReflect.Descriptor instead.
func (*PeerStatsResponse_PeerStats) Descriptor() ([]byte, []int) {
	return file_p2p_rpc_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PeerStatsResponse_PeerStats) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PeerStatsResponse_PeerStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *PeerStatsResponse_PeerStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *PeerStatsResponse_PeerStats) GetLatency() uint64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

var File_p2p_rpc_proto protoreflect.FileDescriptor

var file_p2p_rpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x32, 0x70, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x25, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xae, 0x02, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3a, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x54, 0x4f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x02, 0x22, 0x5e, 0x0a,
	0x10, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x02,
	0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x76,
	0x67, 0x5f, 0x62, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x61, 0x76, 0x67, 0x42, 0x70, 0x73, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f,
	0x62, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x42, 0x70, 0x73, 0x4f, 0x75, 0x74, 0x1a, 0x8c, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x52, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xf9, 0x05, 0x0a, 0x10,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x73, 0x49, 0x6e, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12,
	0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x13, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x42, 0x55,
	0x54, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x45, 0x10, 0x03, 0x22, 0x2a, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x39, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3c,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x12,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x16, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x50, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x56,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x22, 0x33, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x43, 0x0a, 0x0c, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x22, 0x6e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x30, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x32, 0x9b, 0x17, 0x0a, 0x03, 0x50, 0x32, 0x50, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x65,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x61,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x11, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x69, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_rpc_proto_rawDescOnce sync.Once
	file_p2p_rpc_proto_rawDescData = file_p2p_rpc_proto_rawDesc
)

func file_p2p_rpc_proto_rawDescGZIP() []byte {
	file_p2p_rpc_proto_rawDescOnce.Do(func() {
		file_p2p_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_rpc_proto_rawDescData)
	})
	return file_p2p_rpc_proto_rawDescData
}

var file_p2p_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_p2p_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_p2p_rpc_proto_goTypes = []interface{}{
	(PeerElement_CatchupStatus)(0),            // 0: concordium.PeerElement.CatchupStatus
	(NodeInfoResponse_IsInBakingCommittee)(0), // 1: concordium.NodeInfoResponse.IsInBakingCommittee
	(*Empty)(nil),                              // 2: concordium.Empty
	(*NumberResponse)(nil),                     // 3: concordium.NumberResponse
	(*BoolResponse)(nil),                       // 4: concordium.BoolResponse
	(*StringResponse)(nil),                     // 5: concordium.StringResponse
	(*JsonResponse)(nil),                       // 6: concordium.JsonResponse
	(*BytesResponse)(nil),                      // 7: concordium.BytesResponse
	(*PeerConnectRequest)(nil),                 // 8: concordium.PeerConnectRequest
	(*PeerElement)(nil),                        // 9: concordium.PeerElement
	(*PeerListResponse)(nil),                   // 10: concordium.PeerListResponse
	(*PeerStatsResponse)(nil),                  // 11: concordium.PeerStatsResponse
	(*NetworkChangeRequest)(nil),               // 12: concordium.NetworkChangeRequest
	(*NodeInfoResponse)(nil),                   // 13: concordium.NodeInfoResponse
	(*BlockHash)(nil),                          // 14: concordium.BlockHash
	(*AccountAddress)(nil),                     // 15: concordium.AccountAddress
	(*TransactionHash)(nil),                    // 16: concordium.TransactionHash
	(*BlockHashAndAmount)(nil),                 // 17: concordium.BlockHashAndAmount
	(*SendTransactionRequest)(nil),             // 18: concordium.SendTransactionRequest
	(*GetAddressInfoRequest)(nil),              // 19: concordium.GetAddressInfoRequest
	(*GetModuleSourceRequest)(nil),             // 20: concordium.GetModuleSourceRequest
	(*DumpRequest)(nil),                        // 21: concordium.DumpRequest
	(*PeersRequest)(nil),                       // 22: concordium.PeersRequest
	(*GetTransactionStatusInBlockRequest)(nil), // 23: concordium.GetTransactionStatusInBlockRequest
	(*BlockHeight)(nil),                        // 24: concordium.BlockHeight
	(*PeerStatsResponse_PeerStats)(nil),        // 25: concordium.PeerStatsResponse.PeerStats
	(*wrapperspb.StringValue)(nil),             // 26: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),              // 27: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil),             // 28: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),             // 29: google.protobuf.UInt64Value
}
var file_p2p_rpc_proto_depIdxs = []int32{
	26, // 0: concordium.PeerConnectRequest.ip:type_name -> google.protobuf.StringValue
	27, // 1: concordium.PeerConnectRequest.port:type_name -> google.protobuf.Int32Value
	26, // 2: concordium.PeerElement.node_id:type_name -> google.protobuf.StringValue
	28, // 3: concordium.PeerElement.port:type_name -> google.protobuf.UInt32Value
	26, // 4: concordium.PeerElement.ip:type_name -> google.protobuf.StringValue
	0,  // 5: concordium.PeerElement.catchup_status:type_name -> concordium.PeerElement.CatchupStatus
	9,  // 6: concordium.PeerListResponse.peers:type_name -> concordium.PeerElement
	25, // 7: concordium.PeerStatsResponse.peerstats:type_name -> concordium.PeerStatsResponse.PeerStats
	27, // 8: concordium.NetworkChangeRequest.network_id:type_name -> google.protobuf.Int32Value
	26, // 9: concordium.NodeInfoResponse.node_id:type_name -> google.protobuf.StringValue
	1,  // 10: concordium.NodeInfoResponse.consensus_baker_committee:type_name -> concordium.NodeInfoResponse.IsInBakingCommittee
	29, // 11: concordium.NodeInfoResponse.consensus_baker_id:type_name -> google.protobuf.UInt64Value
	26, // 12: concordium.NodeInfoResponse.staging_net_username:type_name -> google.protobuf.StringValue
	8,  // 13: concordium.P2P.PeerConnect:input_type -> concordium.PeerConnectRequest
	8,  // 14: concordium.P2P.PeerDisconnect:input_type -> concordium.PeerConnectRequest
	2,  // 15: concordium.P2P.PeerUptime:input_type -> concordium.Empty
	2,  // 16: concordium.P2P.PeerTotalSent:input_type -> concordium.Empty
	2,  // 17: concordium.P2P.PeerTotalReceived:input_type -> concordium.Empty
	2,  // 18: concordium.P2P.PeerVersion:input_type -> concordium.Empty
	22, // 19: concordium.P2P.PeerStats:input_type -> concordium.PeersRequest
	22, // 20: concordium.P2P.PeerList:input_type -> concordium.PeersRequest
	9,  // 21: concordium.P2P.BanNode:input_type -> concordium.PeerElement
	9,  // 22: concordium.P2P.UnbanNode:input_type -> concordium.PeerElement
	12, // 23: concordium.P2P.JoinNetwork:input_type -> concordium.NetworkChangeRequest
	12, // 24: concordium.P2P.LeaveNetwork:input_type -> concordium.NetworkChangeRequest
	2,  // 25: concordium.P2P.NodeInfo:input_type -> concordium.Empty
	2,  // 26: concordium.P2P.GetConsensusStatus:input_type -> concordium.Empty
	14, // 27: concordium.P2P.GetBlockInfo:input_type -> concordium.BlockHash
	17, // 28: concordium.P2P.GetAncestors:input_type -> concordium.BlockHashAndAmount
	2,  // 29: concordium.P2P.GetBranches:input_type -> concordium.Empty
	24, // 30: concordium.P2P.GetBlocksAtHeight:input_type -> concordium.BlockHeight
	18, // 31: concordium.P2P.SendTransaction:input_type -> concordium.SendTransactionRequest
	2,  // 32: concordium.P2P.StartBaker:input_type -> concordium.Empty
	2,  // 33: concordium.P2P.StopBaker:input_type -> concordium.Empty
	14, // 34: concordium.P2P.GetAccountList:input_type -> concordium.BlockHash
	14, // 35: concordium.P2P.GetInstances:input_type -> concordium.BlockHash
	19, // 36: concordium.P2P.GetAccountInfo:input_type -> concordium.GetAddressInfoRequest
	19, // 37: concordium.P2P.GetInstanceInfo:input_type -> concordium.GetAddressInfoRequest
	14, // 38: concordium.P2P.GetRewardStatus:input_type -> concordium.BlockHash
	14, // 39: concordium.P2P.GetBirkParameters:input_type -> concordium.BlockHash
	14, // 40: concordium.P2P.GetModuleList:input_type -> concordium.BlockHash
	20, // 41: concordium.P2P.GetModuleSource:input_type -> concordium.GetModuleSourceRequest
	14, // 42: concordium.P2P.GetIdentityProviders:input_type -> concordium.BlockHash
	14, // 43: concordium.P2P.GetAnonymityRevokers:input_type -> concordium.BlockHash
	14, // 44: concordium.P2P.GetCryptographicParameters:input_type -> concordium.BlockHash
	2,  // 45: concordium.P2P.GetBannedPeers:input_type -> concordium.Empty
	2,  // 46: concordium.P2P.Shutdown:input_type -> concordium.Empty
	21, // 47: concordium.P2P.DumpStart:input_type -> concordium.DumpRequest
	2,  // 48: concordium.P2P.DumpStop:input_type -> concordium.Empty
	16, // 49: concordium.P2P.GetTransactionStatus:input_type -> concordium.TransactionHash
	23, // 50: concordium.P2P.GetTransactionStatusInBlock:input_type -> concordium.GetTransactionStatusInBlockRequest
	15, // 51: concordium.P2P.GetAccountNonFinalizedTransactions:input_type -> concordium.AccountAddress
	14, // 52: concordium.P2P.GetBlockSummary:input_type -> concordium.BlockHash
	15, // 53: concordium.P2P.GetNextAccountNonce:input_type -> concordium.AccountAddress
	4,  // 54: concordium.P2P.PeerConnect:output_type -> concordium.BoolResponse
	4,  // 55: concordium.P2P.PeerDisconnect:output_type -> concordium.BoolResponse
	3,  // 56: concordium.P2P.PeerUptime:output_type -> concordium.NumberResponse
	3,  // 57: concordium.P2P.PeerTotalSent:output_type -> concordium.NumberResponse
	3,  // 58: concordium.P2P.PeerTotalReceived:output_type -> concordium.NumberResponse
	5,  // 59: concordium.P2P.PeerVersion:output_type -> concordium.StringResponse
	11, // 60: concordium.P2P.PeerStats:output_type -> concordium.PeerStatsResponse
	10, // 61: concordium.P2P.PeerList:output_type -> concordium.PeerListResponse
	4,  // 62: concordium.P2P.BanNode:output_type -> concordium.BoolResponse
	4,  // 63: concordium.P2P.UnbanNode:output_type -> concordium.BoolResponse
	4,  // 64: concordium.P2P.JoinNetwork:output_type -> concordium.BoolResponse
	4,  // 65: concordium.P2P.LeaveNetwork:output_type -> concordium.BoolResponse
	13, // 66: concordium.P2P.NodeInfo:output_type -> concordium.NodeInfoResponse
	6,  // 67: concordium.P2P.GetConsensusStatus:output_type -> concordium.JsonResponse
	6,  // 68: concordium.P2P.GetBlockInfo:output_type -> concordium.JsonResponse
	6,  // 69: concordium.P2P.GetAncestors:output_type -> concordium.JsonResponse
	6,  // 70: concordium.P2P.GetBranches:output_type -> concordium.JsonResponse
	6,  // 71: concordium.P2P.GetBlocksAtHeight:output_type -> concordium.JsonResponse
	4,  // 72: concordium.P2P.SendTransaction:output_type -> concordium.BoolResponse
	4,  // 73: concordium.P2P.StartBaker:output_type -> concordium.BoolResponse
	4,  // 74: concordium.P2P.StopBaker:output_type -> concordium.BoolResponse
	6,  // 75: concordium.P2P.GetAccountList:output_type -> concordium.JsonResponse
	6,  // 76: concordium.P2P.GetInstances:output_type -> concordium.JsonResponse
	6,  // 77: concordium.P2P.GetAccountInfo:output_type -> concordium.JsonResponse
	6,  // 78: concordium.P2P.GetInstanceInfo:output_type -> concordium.JsonResponse
	6,  // 79: concordium.P2P.GetRewardStatus:output_type -> concordium.JsonResponse
	6,  // 80: concordium.P2P.GetBirkParameters:output_type -> concordium.JsonResponse
	6,  // 81: concordium.P2P.GetModuleList:output_type -> concordium.JsonResponse
	7,  // 82: concordium.P2P.GetModuleSource:output_type -> concordium.BytesResponse
	6,  // 83: concordium.P2P.GetIdentityProviders:output_type -> concordium.JsonResponse
	6,  // 84: concordium.P2P.GetAnonymityRevokers:output_type -> concordium.JsonResponse
	6,  // 85: concordium.P2P.GetCryptographicParameters:output_type -> concordium.JsonResponse
	10, // 86: concordium.P2P.GetBannedPeers:output_type -> concordium.PeerListResponse
	4,  // 87: concordium.P2P.Shutdown:output_type -> concordium.BoolResponse
	4,  // 88: concordium.P2P.DumpStart:output_type -> concordium.BoolResponse
	4,  // 89: concordium.P2P.DumpStop:output_type -> concordium.BoolResponse
	6,  // 90: concordium.P2P.GetTransactionStatus:output_type -> concordium.JsonResponse
	6,  // 91: concordium.P2P.GetTransactionStatusInBlock:output_type -> concordium.JsonResponse
	6,  // 92: concordium.P2P.GetAccountNonFinalizedTransactions:output_type -> concordium.JsonResponse
	6,  // 93: concordium.P2P.GetBlockSummary:output_type -> concordium.JsonResponse
	6,  // 94: concordium.P2P.GetNextAccountNonce:output_type -> concordium.JsonResponse
	54, // [54:95] is the sub-list for method output_type
	13, // [13:54] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_p2p_rpc_proto_init() }
func file_p2p_rpc_proto_init() {
	if File_p2p_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_p2p_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHashAndAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionStatusInBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStatsResponse_PeerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_rpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_p2p_rpc_proto_goTypes,
		DependencyIndexes: file_p2p_rpc_proto_depIdxs,
		EnumInfos:         file_p2p_rpc_proto_enumTypes,
		MessageInfos:      file_p2p_rpc_proto_msgTypes,
	}.Build()
	File_p2p_rpc_proto = out.File
	file_p2p_rpc_proto_rawDesc = nil
	file_p2p_rpc_proto_goTypes = nil
	file_p2p_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// P2PClient is the client API for P2P service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PClient interface {
	//! Suggest to a peer to connect to the submitted peer details.
	//! This, if successful, adds the peer to the list of given addresses.
	PeerConnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Disconnect from the peer and remove them from the given addresses list
	//! if they are on it. Return if the request was processed successfully.
	PeerDisconnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Peer uptime in milliseconds
	PeerUptime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error)
	//! Peer total number of sent packets
	PeerTotalSent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error)
	//! Peer total number of received packets
	PeerTotalReceived(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error)
	//! Peer client software version
	PeerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	//! Stats for connected peers
	PeerStats(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeerStatsResponse, error)
	//! List of connected peers
	PeerList(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeerListResponse, error)
	BanNode(ctx context.Context, in *PeerElement, opts ...grpc.CallOption) (*BoolResponse, error)
	UnbanNode(ctx context.Context, in *PeerElement, opts ...grpc.CallOption) (*BoolResponse, error)
	JoinNetwork(ctx context.Context, in *NetworkChangeRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LeaveNetwork(ctx context.Context, in *NetworkChangeRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Get information about the running Node
	NodeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getconsensusstatus
	GetConsensusStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getblockinfo
	GetBlockInfo(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getancestors
	GetAncestors(ctx context.Context, in *BlockHashAndAmount, opts ...grpc.CallOption) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getbranches
	GetBranches(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Get the blocks at the given height
	GetBlocksAtHeight(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Submit a local transaction
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Start the baker in the consensus module
	StartBaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Stop the baker in the consensus module
	StopBaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	GetAccountList(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetInstances(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetAccountInfo(ctx context.Context, in *GetAddressInfoRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	GetInstanceInfo(ctx context.Context, in *GetAddressInfoRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	GetRewardStatus(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetBirkParameters(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetModuleList(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetModuleSource(ctx context.Context, in *GetModuleSourceRequest, opts ...grpc.CallOption) (*BytesResponse, error)
	GetIdentityProviders(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetAnonymityRevokers(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetCryptographicParameters(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	GetBannedPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerListResponse, error)
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	DumpStart(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DumpStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	//! Query for the status of a transaction by its hash
	GetTransactionStatus(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Query for transactions in a block by its hash
	GetTransactionStatusInBlock(ctx context.Context, in *GetTransactionStatusInBlockRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Query for non-finalized transactions present on an account by the account address
	GetAccountNonFinalizedTransactions(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Request a summary for a block by its hash
	GetBlockSummary(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error)
	//! Request next nonce information for an account
	GetNextAccountNonce(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*JsonResponse, error)
}

type p2PClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PClient(cc grpc.ClientConnInterface) P2PClient {
	return &p2PClient{cc}
}

func (c *p2PClient) PeerConnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerDisconnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerUptime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerTotalSent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerTotalSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerTotalReceived(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerTotalReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerStats(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeerStatsResponse, error) {
	out := new(PeerStatsResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) PeerList(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeerListResponse, error) {
	out := new(PeerListResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/PeerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) BanNode(ctx context.Context, in *PeerElement, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/BanNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) UnbanNode(ctx context.Context, in *PeerElement, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/UnbanNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) JoinNetwork(ctx context.Context, in *NetworkChangeRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/JoinNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) LeaveNetwork(ctx context.Context, in *NetworkChangeRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/LeaveNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) NodeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetConsensusStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetConsensusStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBlockInfo(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetAncestors(ctx context.Context, in *BlockHashAndAmount, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBranches(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBlocksAtHeight(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBlocksAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) StartBaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/StartBaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) StopBaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/StopBaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetAccountList(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetInstances(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetAccountInfo(ctx context.Context, in *GetAddressInfoRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetInstanceInfo(ctx context.Context, in *GetAddressInfoRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetInstanceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetRewardStatus(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetRewardStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBirkParameters(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBirkParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetModuleList(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetModuleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetModuleSource(ctx context.Context, in *GetModuleSourceRequest, opts ...grpc.CallOption) (*BytesResponse, error) {
	out := new(BytesResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetModuleSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetIdentityProviders(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetAnonymityRevokers(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetAnonymityRevokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetCryptographicParameters(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetCryptographicParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBannedPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerListResponse, error) {
	out := new(PeerListResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBannedPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) DumpStart(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/DumpStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) DumpStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/DumpStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetTransactionStatus(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetTransactionStatusInBlock(ctx context.Context, in *GetTransactionStatusInBlockRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetTransactionStatusInBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetAccountNonFinalizedTransactions(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetAccountNonFinalizedTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetBlockSummary(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetBlockSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) GetNextAccountNonce(ctx context.Context, in *AccountAddress, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, "/concordium.P2P/GetNextAccountNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServer is the server API for P2P service.
type P2PServer interface {
	//! Suggest to a peer to connect to the submitted peer details.
	//! This, if successful, adds the peer to the list of given addresses.
	PeerConnect(context.Context, *PeerConnectRequest) (*BoolResponse, error)
	//! Disconnect from the peer and remove them from the given addresses list
	//! if they are on it. Return if the request was processed successfully.
	PeerDisconnect(context.Context, *PeerConnectRequest) (*BoolResponse, error)
	//! Peer uptime in milliseconds
	PeerUptime(context.Context, *Empty) (*NumberResponse, error)
	//! Peer total number of sent packets
	PeerTotalSent(context.Context, *Empty) (*NumberResponse, error)
	//! Peer total number of received packets
	PeerTotalReceived(context.Context, *Empty) (*NumberResponse, error)
	//! Peer client software version
	PeerVersion(context.Context, *Empty) (*StringResponse, error)
	//! Stats for connected peers
	PeerStats(context.Context, *PeersRequest) (*PeerStatsResponse, error)
	//! List of connected peers
	PeerList(context.Context, *PeersRequest) (*PeerListResponse, error)
	BanNode(context.Context, *PeerElement) (*BoolResponse, error)
	UnbanNode(context.Context, *PeerElement) (*BoolResponse, error)
	JoinNetwork(context.Context, *NetworkChangeRequest) (*BoolResponse, error)
	LeaveNetwork(context.Context, *NetworkChangeRequest) (*BoolResponse, error)
	//! Get information about the running Node
	NodeInfo(context.Context, *Empty) (*NodeInfoResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getconsensusstatus
	GetConsensusStatus(context.Context, *Empty) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getblockinfo
	GetBlockInfo(context.Context, *BlockHash) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getancestors
	GetAncestors(context.Context, *BlockHashAndAmount) (*JsonResponse, error)
	//! see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getbranches
	GetBranches(context.Context, *Empty) (*JsonResponse, error)
	//! Get the blocks at the given height
	GetBlocksAtHeight(context.Context, *BlockHeight) (*JsonResponse, error)
	//! Submit a local transaction
	SendTransaction(context.Context, *SendTransactionRequest) (*BoolResponse, error)
	//! Start the baker in the consensus module
	StartBaker(context.Context, *Empty) (*BoolResponse, error)
	//! Stop the baker in the consensus module
	StopBaker(context.Context, *Empty) (*BoolResponse, error)
	GetAccountList(context.Context, *BlockHash) (*JsonResponse, error)
	GetInstances(context.Context, *BlockHash) (*JsonResponse, error)
	GetAccountInfo(context.Context, *GetAddressInfoRequest) (*JsonResponse, error)
	GetInstanceInfo(context.Context, *GetAddressInfoRequest) (*JsonResponse, error)
	GetRewardStatus(context.Context, *BlockHash) (*JsonResponse, error)
	GetBirkParameters(context.Context, *BlockHash) (*JsonResponse, error)
	GetModuleList(context.Context, *BlockHash) (*JsonResponse, error)
	GetModuleSource(context.Context, *GetModuleSourceRequest) (*BytesResponse, error)
	GetIdentityProviders(context.Context, *BlockHash) (*JsonResponse, error)
	GetAnonymityRevokers(context.Context, *BlockHash) (*JsonResponse, error)
	GetCryptographicParameters(context.Context, *BlockHash) (*JsonResponse, error)
	GetBannedPeers(context.Context, *Empty) (*PeerListResponse, error)
	Shutdown(context.Context, *Empty) (*BoolResponse, error)
	DumpStart(context.Context, *DumpRequest) (*BoolResponse, error)
	DumpStop(context.Context, *Empty) (*BoolResponse, error)
	//! Query for the status of a transaction by its hash
	GetTransactionStatus(context.Context, *TransactionHash) (*JsonResponse, error)
	//! Query for transactions in a block by its hash
	GetTransactionStatusInBlock(context.Context, *GetTransactionStatusInBlockRequest) (*JsonResponse, error)
	//! Query for non-finalized transactions present on an account by the account address
	GetAccountNonFinalizedTransactions(context.Context, *AccountAddress) (*JsonResponse, error)
	//! Request a summary for a block by its hash
	GetBlockSummary(context.Context, *BlockHash) (*JsonResponse, error)
	//! Request next nonce information for an account
	GetNextAccountNonce(context.Context, *AccountAddress) (*JsonResponse, error)
}

// UnimplementedP2PServer can be embedded to have forward compatible implementations.
type UnimplementedP2PServer struct {
}

func (*UnimplementedP2PServer) PeerConnect(context.Context, *PeerConnectRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerConnect not implemented")
}
func (*UnimplementedP2PServer) PeerDisconnect(context.Context, *PeerConnectRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerDisconnect not implemented")
}
func (*UnimplementedP2PServer) PeerUptime(context.Context, *Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerUptime not implemented")
}
func (*UnimplementedP2PServer) PeerTotalSent(context.Context, *Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerTotalSent not implemented")
}
func (*UnimplementedP2PServer) PeerTotalReceived(context.Context, *Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerTotalReceived not implemented")
}
func (*UnimplementedP2PServer) PeerVersion(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerVersion not implemented")
}
func (*UnimplementedP2PServer) PeerStats(context.Context, *PeersRequest) (*PeerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerStats not implemented")
}
func (*UnimplementedP2PServer) PeerList(context.Context, *PeersRequest) (*PeerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerList not implemented")
}
func (*UnimplementedP2PServer) BanNode(context.Context, *PeerElement) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanNode not implemented")
}
func (*UnimplementedP2PServer) UnbanNode(context.Context, *PeerElement) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanNode not implemented")
}
func (*UnimplementedP2PServer) JoinNetwork(context.Context, *NetworkChangeRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (*UnimplementedP2PServer) LeaveNetwork(context.Context, *NetworkChangeRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveNetwork not implemented")
}
func (*UnimplementedP2PServer) NodeInfo(context.Context, *Empty) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (*UnimplementedP2PServer) GetConsensusStatus(context.Context, *Empty) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensusStatus not implemented")
}
func (*UnimplementedP2PServer) GetBlockInfo(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfo not implemented")
}
func (*UnimplementedP2PServer) GetAncestors(context.Context, *BlockHashAndAmount) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (*UnimplementedP2PServer) GetBranches(context.Context, *Empty) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranches not implemented")
}
func (*UnimplementedP2PServer) GetBlocksAtHeight(context.Context, *BlockHeight) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksAtHeight not implemented")
}
func (*UnimplementedP2PServer) SendTransaction(context.Context, *SendTransactionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedP2PServer) StartBaker(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBaker not implemented")
}
func (*UnimplementedP2PServer) StopBaker(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBaker not implemented")
}
func (*UnimplementedP2PServer) GetAccountList(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountList not implemented")
}
func (*UnimplementedP2PServer) GetInstances(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstances not implemented")
}
func (*UnimplementedP2PServer) GetAccountInfo(context.Context, *GetAddressInfoRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (*UnimplementedP2PServer) GetInstanceInfo(context.Context, *GetAddressInfoRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceInfo not implemented")
}
func (*UnimplementedP2PServer) GetRewardStatus(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardStatus not implemented")
}
func (*UnimplementedP2PServer) GetBirkParameters(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirkParameters not implemented")
}
func (*UnimplementedP2PServer) GetModuleList(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleList not implemented")
}
func (*UnimplementedP2PServer) GetModuleSource(context.Context, *GetModuleSourceRequest) (*BytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleSource not implemented")
}
func (*UnimplementedP2PServer) GetIdentityProviders(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProviders not implemented")
}
func (*UnimplementedP2PServer) GetAnonymityRevokers(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnonymityRevokers not implemented")
}
func (*UnimplementedP2PServer) GetCryptographicParameters(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptographicParameters not implemented")
}
func (*UnimplementedP2PServer) GetBannedPeers(context.Context, *Empty) (*PeerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannedPeers not implemented")
}
func (*UnimplementedP2PServer) Shutdown(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedP2PServer) DumpStart(context.Context, *DumpRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpStart not implemented")
}
func (*UnimplementedP2PServer) DumpStop(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpStop not implemented")
}
func (*UnimplementedP2PServer) GetTransactionStatus(context.Context, *TransactionHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (*UnimplementedP2PServer) GetTransactionStatusInBlock(context.Context, *GetTransactionStatusInBlockRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatusInBlock not implemented")
}
func (*UnimplementedP2PServer) GetAccountNonFinalizedTransactions(context.Context, *AccountAddress) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountNonFinalizedTransactions not implemented")
}
func (*UnimplementedP2PServer) GetBlockSummary(context.Context, *BlockHash) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockSummary not implemented")
}
func (*UnimplementedP2PServer) GetNextAccountNonce(context.Context, *AccountAddress) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextAccountNonce not implemented")
}

func RegisterP2PServer(s *grpc.Server, srv P2PServer) {
	s.RegisterService(&_P2P_serviceDesc, srv)
}

func _P2P_PeerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerConnect(ctx, req.(*PeerConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerDisconnect(ctx, req.(*PeerConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerUptime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerTotalSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerTotalSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerTotalSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerTotalSent(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerTotalReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerTotalReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerTotalReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerTotalReceived(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerStats(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_PeerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).PeerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/PeerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).PeerList(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_BanNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).BanNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/BanNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).BanNode(ctx, req.(*PeerElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_UnbanNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).UnbanNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/UnbanNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).UnbanNode(ctx, req.(*PeerElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).JoinNetwork(ctx, req.(*NetworkChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_LeaveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).LeaveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/LeaveNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).LeaveNetwork(ctx, req.(*NetworkChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).NodeInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetConsensusStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetConsensusStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetConsensusStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetConsensusStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBlockInfo(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashAndAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetAncestors(ctx, req.(*BlockHashAndAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBranches(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBlocksAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBlocksAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBlocksAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBlocksAtHeight(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_StartBaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).StartBaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/StartBaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).StartBaker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_StopBaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).StopBaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/StopBaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).StopBaker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetAccountList(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetInstances(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetAccountInfo(ctx, req.(*GetAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetInstanceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetInstanceInfo(ctx, req.(*GetAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetRewardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetRewardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetRewardStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetRewardStatus(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBirkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBirkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBirkParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBirkParameters(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetModuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetModuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetModuleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetModuleList(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetModuleSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetModuleSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetModuleSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetModuleSource(ctx, req.(*GetModuleSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetIdentityProviders(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetAnonymityRevokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetAnonymityRevokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetAnonymityRevokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetAnonymityRevokers(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetCryptographicParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetCryptographicParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetCryptographicParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetCryptographicParameters(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBannedPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBannedPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBannedPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBannedPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_DumpStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).DumpStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/DumpStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).DumpStart(ctx, req.(*DumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_DumpStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).DumpStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/DumpStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).DumpStop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetTransactionStatus(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetTransactionStatusInBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStatusInBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetTransactionStatusInBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetTransactionStatusInBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetTransactionStatusInBlock(ctx, req.(*GetTransactionStatusInBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetAccountNonFinalizedTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetAccountNonFinalizedTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetAccountNonFinalizedTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetAccountNonFinalizedTransactions(ctx, req.(*AccountAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetBlockSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetBlockSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetBlockSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetBlockSummary(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_GetNextAccountNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).GetNextAccountNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concordium.P2P/GetNextAccountNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).GetNextAccountNonce(ctx, req.(*AccountAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2P_serviceDesc = grpc.ServiceDesc{
	ServiceName: "concordium.P2P",
	HandlerType: (*P2PServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerConnect",
			Handler:    _P2P_PeerConnect_Handler,
		},
		{
			MethodName: "PeerDisconnect",
			Handler:    _P2P_PeerDisconnect_Handler,
		},
		{
			MethodName: "PeerUptime",
			Handler:    _P2P_PeerUptime_Handler,
		},
		{
			MethodName: "PeerTotalSent",
			Handler:    _P2P_PeerTotalSent_Handler,
		},
		{
			MethodName: "PeerTotalReceived",
			Handler:    _P2P_PeerTotalReceived_Handler,
		},
		{
			MethodName: "PeerVersion",
			Handler:    _P2P_PeerVersion_Handler,
		},
		{
			MethodName: "PeerStats",
			Handler:    _P2P_PeerStats_Handler,
		},
		{
			MethodName: "PeerList",
			Handler:    _P2P_PeerList_Handler,
		},
		{
			MethodName: "BanNode",
			Handler:    _P2P_BanNode_Handler,
		},
		{
			MethodName: "UnbanNode",
			Handler:    _P2P_UnbanNode_Handler,
		},
		{
			MethodName: "JoinNetwork",
			Handler:    _P2P_JoinNetwork_Handler,
		},
		{
			MethodName: "LeaveNetwork",
			Handler:    _P2P_LeaveNetwork_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _P2P_NodeInfo_Handler,
		},
		{
			MethodName: "GetConsensusStatus",
			Handler:    _P2P_GetConsensusStatus_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _P2P_GetBlockInfo_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _P2P_GetAncestors_Handler,
		},
		{
			MethodName: "GetBranches",
			Handler:    _P2P_GetBranches_Handler,
		},
		{
			MethodName: "GetBlocksAtHeight",
			Handler:    _P2P_GetBlocksAtHeight_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _P2P_SendTransaction_Handler,
		},
		{
			MethodName: "StartBaker",
			Handler:    _P2P_StartBaker_Handler,
		},
		{
			MethodName: "StopBaker",
			Handler:    _P2P_StopBaker_Handler,
		},
		{
			MethodName: "GetAccountList",
			Handler:    _P2P_GetAccountList_Handler,
		},
		{
			MethodName: "GetInstances",
			Handler:    _P2P_GetInstances_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _P2P_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetInstanceInfo",
			Handler:    _P2P_GetInstanceInfo_Handler,
		},
		{
			MethodName: "GetRewardStatus",
			Handler:    _P2P_GetRewardStatus_Handler,
		},
		{
			MethodName: "GetBirkParameters",
			Handler:    _P2P_GetBirkParameters_Handler,
		},
		{
			MethodName: "GetModuleList",
			Handler:    _P2P_GetModuleList_Handler,
		},
		{
			MethodName: "GetModuleSource",
			Handler:    _P2P_GetModuleSource_Handler,
		},
		{
			MethodName: "GetIdentityProviders",
			Handler:    _P2P_GetIdentityProviders_Handler,
		},
		{
			MethodName: "GetAnonymityRevokers",
			Handler:    _P2P_GetAnonymityRevokers_Handler,
		},
		{
			MethodName: "GetCryptographicParameters",
			Handler:    _P2P_GetCryptographicParameters_Handler,
		},
		{
			MethodName: "GetBannedPeers",
			Handler:    _P2P_GetBannedPeers_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _P2P_Shutdown_Handler,
		},
		{
			MethodName: "DumpStart",
			Handler:    _P2P_DumpStart_Handler,
		},
		{
			MethodName: "DumpStop",
			Handler:    _P2P_DumpStop_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _P2P_GetTransactionStatus_Handler,
		},
		{
			MethodName: "GetTransactionStatusInBlock",
			Handler:    _P2P_GetTransactionStatusInBlock_Handler,
		},
		{
			MethodName: "GetAccountNonFinalizedTransactions",
			Handler:    _P2P_GetAccountNonFinalizedTransactions_Handler,
		},
		{
			MethodName: "GetBlockSummary",
			Handler:    _P2P_GetBlockSummary_Handler,
		},
		{
			MethodName: "GetNextAccountNonce",
			Handler:    _P2P_GetNextAccountNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2p_rpc.proto",
}
